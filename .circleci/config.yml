# Java Gradle CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-java/ for more details

version: 2

# References are blocks of configurations that we can reference and reuse.
references:

  # Workspaces represent the spaces we work on & are useful for sharing data between jobs.
  # Create a workspace with the ~/code directory.
  workspace: &workspace
    ~/code

  # Docker Image Configs
  android_config: &android_config
    working_directory: *workspace
    docker:
      - image: circleci/android:api-28-alpha
    environment:
      TERM: dumb
      _JAVA_OPTIONS: "-Xmx3200m -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap"
      GRADLE_OPTS: '-Dorg.gradle.jvmargs="-Xmx3200m"'

  # Cache - a cache mechanism for our dependencies
  gradle_key: &gradle_key
    jars-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}-{{ checksum "build.gradle" }}-{{ checksum "app/build.gradle" }}

  gems_key: &gems_key
    gems-{{ checksum "Gemfile.lock" }}

  restore_gradle_cache: &restore_gradle_cache
    restore_cache:
      key: *gradle_key

  restore_gems_cache: &restore_gems_cache
    restore_cache:
      key: *gems_key

  save_gradle_cache: &save_gradle_cache
    save_cache:
      paths:
        - ~/.gradle
        - ~/.m2
      key: *gradle_key

  save_gems_cache: &save_gems_cache
    save_cache:
      paths:
        - vendor/bundle
      key: *gems_key

  # Dependencies
  ruby_dependencies: &ruby_dependencies
    run:
      name: Download Ruby Dependencies
      command: |
        gem install bundler
        bundle check || bundle update || bundle install --path vendor/bundle

  android_dependencies: &android_dependencies
    run:
      name: Download Android Dependencies
      command: ./gradlew androidDependencies

  # Keys
  decode_android_key: &decode_android_key
    run:
      name: Decode Android Keystore
      command: echo $KEYSTORE_PATH | base64 -d | tee keystore.jks app/keystore.jks >/dev/null

  # ---------------------------------------------------------------------------------------------------------------------
  # DECODE FIREBASE GOOGLE_SERVICE_JSON FILE AND WRITE IT TO A FILE
  # ---------------------------------------------------------------------------------------------------------------------
  decode_gservices_key: &decode_gservices_key
    run:
      name: Decode Google Services JSON key
      command: |
        echo $GOOGLE_SERVICES_JSON | base64 -d | tee app/google-services.json app/src/mock/google-services.json app/src/prod/google-services.json >/dev/null

  # ---------------------------------------------------------------------------------------------------------------------
  # INSTALL THE FIREBASE CLI FILE & ENABLE THE GLOBALLY AVAILABLE firebase COMMAND
  # ---------------------------------------------------------------------------------------------------------------------
  firebase_cli_install: &firebase_cli_install
    run:
      name: Install the Firebase CLI
      command: |
        curl -sL firebase.tools | bash


jobs:

  ## Run unit tests
  test_unit:
    <<: *android_config
    steps:
      - checkout
      - *restore_gradle_cache
      - *restore_gems_cache
      - *android_dependencies
      - *ruby_dependencies
      - *save_gradle_cache
      - *save_gems_cache
      - *decode_gservices_key
      - run:
          name: Run unit tests
          command: |
#            if [[ ! -z "$CIRCLE_PULL_REQUEST" ]]
#            if [ -z "${CIRCLE_PULL_REQUEST}" ];
            if [[ ! -z "$CIRCLE_PULL_REQUEST" ]]; then
              echo "Doing a Pull Request Build for ${CIRCLE_PULL_REQUEST}."
              bundle exec fastlane unit_tests build_flavor:"dev" build_type:"debug"
            elif [ "${CIRCLE_BRANCH}" == "master" ]; then
              echo "Doing a Build on the ${CIRCLE_BRANCH} branch."
              bundle exec fastlane unit_tests build_flavor:"qa" build_type:"debug"
            elif [ "${CIRCLE_BRANCH}" == "release" ];  then
              echo "Doing a Build on the ${CIRCLE_BRANCH} branch."
              bundle exec fastlane unit_tests build_flavor:"prod" build_type:"release"
            else
              echo "Doing a default Build on the ${CIRCLE_BRANCH} branch."
              bundle exec fastlane unit_tests
              # bundle exec fastlane instrumentation_tests_firebase_testlab build_flavor:"Qa"
      - store_artifacts:
           path: app/build/reports/
           destination: /reports/
      - store_test_results:
          path: app/build/test_results/
          destination: /test-results/

  # Run Instrumentation Tests
  test_instrumentation:
    <<: *android_config
    steps:
      - checkout
      - *restore_gradle_cache
      - *restore_gems_cache
      - *android_dependencies
      - *ruby_dependencies
      - *save_gradle_cache
      - *save_gems_cache
      - *decode_gservices_key
      - run:
          name: Run Instrumented Tests - (Espresso Tests)
          command: |
            if [ -z "${CIRCLE_PULL_REQUEST:-}" ];
            then
              echo "Run Instrumented Test for the Pull Request Build ${CIRCLE_PULL_REQUEST}."
              bundle exec fastlane instrumentation_tests_firebase_testlab build_flavor:"dev"
            elif [ "${CIRCLE_BRANCH}" == "master" ];
            then
              echo "Run Instrumented Test on the ${CIRCLE_BRANCH} branch."
              bundle exec fastlane instrumentation_tests_firebase_testlab build_flavor:"qa"
            elif [ "${CIRCLE_BRANCH}" == "release" ]; # /^release-[0-9]+\.[0-9]+\.[0-9]+$/
            then
              echo "Run Instrumented Test on the ${CIRCLE_BRANCH} branch."
              bundle exec fastlane instrumentation_tests_firebase_testlab build_flavor:"prod"
            else
              echo "Run Instrumented Test for a default Build on the ${CIRCLE_BRANCH} branch."
              bundle exec fastlane instrumentation_tests_firebase_testlab build_flavor:"dev"
      - store_artifacts:
          path: app/build/outputs/
          destination: /outputs/
      - store_test_results:
          path: app/build/outputs/
          destination: /outputs/

  slack_deployment:
    <<: *android_config
    steps:
      - checkout
      - *restore_gradle_cache
      - *restore_gems_cache
      - *android_dependencies
      - *ruby_dependencies
      - *save_gradle_cache
      - *save_gems_cache
      - *decode_android_key
      - run:
          name: Upload APK to Slack Channel
          command: bundle exec fastlane slack_apk_build

  firebase_app_distribution:
    <<: *android_config
    steps:
      - checkout
      - *restore_gradle_cache
      - *restore_gems_cache
      - *android_dependencies
      - *ruby_dependencies
      - *save_gradle_cache
      - *save_gems_cache
      - *decode_android_key
      - *firebase_cli_install
      - run:
          name: Deploy latest Beta build to Firebase App Distribution
          command: bundle exec fastlane distribute group:android-qa

workflows:
  version: 2
  workflow:

    # Jobs that will run when you push to your repo
    jobs:
      - test_unit
      - test_instrumentation:
          requires:
            - test_unit
      - slack_deployment:
          requires:
            - test_instrumentation
      - firebase_app_distribution:
          requires:
            - test_instrumentation