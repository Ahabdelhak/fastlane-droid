# Java Gradle CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-java/ for more details

version: 2

# References are blocks of configurations that we can reference and reuse.
references:

  # Workspaces represent the spaces we work on & are useful for sharing data between jobs.
  # Create a workspace with the ~/code directory.
  workspace: &workspace
    ~/code

  # Docker Image Configs
  android_config: &android_config
    working_directory: *workspace
    docker:
      - image: circleci/android:api-28-alpha
    environment:
      TERM: dumb
      _JAVA_OPTIONS: "-Xmx3200m -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap"
      GRADLE_OPTS: '-Dorg.gradle.jvmargs="-Xmx3200m"'

  # Cache - a cache mechanism for our dependencies
  gradle_key: &gradle_key
    jars-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}-{{ checksum "build.gradle" }}-{{ checksum "app/build.gradle" }}

  gems_key: &gems_key
    gems-{{ checksum "Gemfile.lock" }}

  restore_gradle_cache: &restore_gradle_cache
    restore_cache:
      key: *gradle_key

  restore_gems_cache: &restore_gems_cache
    restore_cache:
      key: *gems_key

  save_gradle_cache: &save_gradle_cache
    save_cache:
      paths:
        - ~/.gradle
        - ~/.m2
      key: *gradle_key

  save_gems_cache: &save_gems_cache
    save_cache:
      paths:
        - vendor/bundle
      key: *gems_key

  # Dependencies
  ruby_dependencies: &ruby_dependencies
    run:
      name: Download Ruby Dependencies
      command: |
        gem install bundler
        bundle check || bundle update || bundle install --path vendor/bundle

  android_dependencies: &android_dependencies
    run:
      name: Download Android Dependencies
      command: ./gradlew androidDependencies

  # Keys
  decode_android_key: &decode_android_key
    run:
      name: Decode Android Keystore
      command: echo $KEYSTORE_PATH | base64 -d | tee keystore.jks app/keystore.jks >/dev/null

  # ---------------------------------------------------------------------------------------------------------------------
  # DECODE FIREBASE GOOGLE_SERVICE_JSON FILE AND WRITE IT TO A FILE
  # ---------------------------------------------------------------------------------------------------------------------
  decode_gservices_key: &decode_gservices_key
    run:
      name: Decode Google Services JSON key
      command: |
        echo $GOOGLE_SERVICES_JSON | base64 -d | tee app/google-services.json app/src/mock/google-services.json app/src/prod/google-services.json >/dev/null

  # ---------------------------------------------------------------------------------------------------------------------
  # INSTALL THE FIREBASE CLI FILE & ENABLE THE GLOBALLY AVAILABLE firebase COMMAND
  # ---------------------------------------------------------------------------------------------------------------------
  firebase_cli_install: &firebase_cli_install
    run:
      name: Install the Firebase CLI
      command: |
        curl -sL firebase.tools | bash


jobs:

  ## Run unit tests
  test_unit:
    <<: *android_config
    steps:
      - checkout
      - *restore_gradle_cache
      - *restore_gems_cache
      - *android_dependencies
      - *ruby_dependencies
      - *save_gradle_cache
      - *save_gems_cache
      - *decode_gservices_key
      - run:
          name: Run unit tests
          command: |
#            if [[ ! -z "$CIRCLE_PULL_REQUEST" ]]
            if [ -z "${CIRCLE_PULL_REQUEST:-}" ];
            then
              echo "Doing a Pull Request Build for ${CIRCLE_PULL_REQUEST}."
              bundle exec fastlane unit_tests build_flavor:"dev" build_type:"debug"
            elif [ "${CIRCLE_BRANCH}" == "master" ];
            then
              echo "Doing a Build on the ${CIRCLE_BRANCH} branch."
              bundle exec fastlane unit_tests build_flavor:"qa" build_type:"debug"
            elif [ "${CIRCLE_BRANCH}" == "release" ]; # /^release-[0-9]+\.[0-9]+\.[0-9]+$/
            then
              echo "Doing a Build on the ${CIRCLE_BRANCH} branch."
              bundle exec fastlane unit_tests build_flavor:"prod" build_type:"release"
            else
              echo "Doing a default Build on the ${CIRCLE_BRANCH} branch."
              bundle exec fastlane unit_tests
              # bundle exec fastlane instrumentation_tests_firebase_testlab build_flavor:"Qa"
      - store_artifacts:
           path: app/build/reports/
           destination: /reports/
      - store_test_results:
          path: app/build/test_results/
          destination: /test-results/

  ## Run Instrumented Tests
  test_instrumentation:
    <<: *android_config
    steps:
      - checkout
#      # Setup Android Variables for Android Emulator
#      - run:
#          name: Setup environment variables
#          command: |
#            echo 'export PATH="$PATH:/usr/local/opt/node@8/bin:${HOME}/.yarn/bin:${HOME}/${CIRCLE_PROJECT_REPONAME}/node_modules/.bin:/usr/local/share/android-sdk/tools/bin"' >> $BASH_ENV
#            echo 'export ANDROID_HOME="/usr/local/share/android-sdk"' >> $BASH_ENV
#            echo 'export ANDROID_SDK_HOME="/usr/local/share/android-sdk"' >> $BASH_ENV
#            echo 'export ANDROID_SDK_ROOT="/usr/local/share/android-sdk"' >> $BASH_ENV
#            echo 'export QEMU_AUDIO_DRV=none' >> $BASH_ENV
#            echo 'export JAVA_HOME=/Library/Java/Home' >> $BASH_ENV

      # Install Android SDK
#      - run:
#          name: Install Android sdk
#          command: |
#            HOMEBREW_NO_AUTO_UPDATE=1 brew tap homebrew/cask
#            HOMEBREW_NO_AUTO_UPDATE=1 brew cask install android-sdk

      # Install Emulator
#      - run:
#          name: Install emulator
#          command: (yes | sdkmanager "platform-tools" "platforms;android-26" "extras;intel;Hardware_Accelerated_Execution_Manager" "build-tools;26.0.0" "system-images;android-26;default;x86" "emulator" --verbose) || true

      # Gradle and ruby/fastlane dependencies
      - *restore_gradle_cache
      - *restore_gems_cache
      - *android_dependencies
      - *ruby_dependencies
      - *save_gradle_cache
      - *save_gems_cache
      - *decode_gservices_key
      - run:
          name: Setup emulator
          command: sdkmanager "system-images;android-28;default;armeabi-v7a" && echo "no" | avdmanager create avd -n test -k "system-images;android-16;default;armeabi-v7a"
      - run:
          name: Launch emulator
          command: export LD_LIBRARY_PATH=${ANDROID_HOME}/emulator/lib64:${ANDROID_HOME}/emulator/lib64/qt/lib && emulator64-arm -avd test -noaudio -no-boot-anim -no-window -accel auto -verbose
          background: true
      - run:
          name: Wait emulator
          command: |
            # wait for it to have booted
            circle-android wait-for-boot
            # unlock the emulator screen
            sleep 30
            adb shell input keyevent 82

#      # Start emulator
#      - run: avdmanager create avd -n Nexus_5X_API_26_x86 -k "system-images;android-26;default;x86" -d "Nexus 5X"
#      - run: osascript ./fastlane/recording_related/dismiss_warning.scpt # Dismisses the same named computer error
#      - run:
#          name: Run emulator in background
#          command: /usr/local/share/android-sdk/tools/emulator @Nexus_5X_API_26_x86 -skin 1080x2066 -memory 2048 -noaudio
#          background: true

      # Instrumented tests
      - run:
          name: Run Instrumented Tests - (Espresso Tests)
          command: bundle exec fastlane instrumented_tests
#          no_output_timeout: 30m
      - store_artifacts:
          path: app/build/outputs/
          destination: /outputs/
      - store_test_results:
          path: app/build/outputs/
          destination: /outputs/

  slack_deployment:
    <<: *android_config
    steps:
      - checkout
      - *restore_gradle_cache
      - *restore_gems_cache
      - *android_dependencies
      - *ruby_dependencies
      - *save_gradle_cache
      - *save_gems_cache
      - *decode_android_key
      - run:
          name: Upload APK to Slack Channel
          command: bundle exec fastlane slack_apk_build

  firebase_app_distribution:
    <<: *android_config
    steps:
      - checkout
      - *restore_gradle_cache
      - *restore_gems_cache
      - *android_dependencies
      - *ruby_dependencies
      - *save_gradle_cache
      - *save_gems_cache
      - *decode_android_key
      - *firebase_cli_install
      - run:
          name: Deploy latest Beta build to Firebase App Distribution
          command: bundle exec fastlane distribute group:android-qa

workflows:
  version: 2
  workflow:

    # Jobs that will run when you push to your repo
    jobs:
      - test_unit
      - test_instrumentation:
          requires:
            - test_unit
      - slack_deployment:
          requires:
            - test_instrumentation
      - firebase_app_distribution:
          requires:
            - test_instrumentation